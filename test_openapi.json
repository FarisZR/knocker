{
  "openapi": "3.1.0",
  "info": {
    "title": "Knocker API",
    "description": "\nA dynamic IP whitelisting service that works with reverse proxy authorization.\n\n## Features\n\n* **API Key Authentication**: Secure your knock endpoint with configurable API keys\n* **Configurable TTL**: Each API key can have its own Time-To-Live (TTL)\n* **Remote Whitelisting**: Admin keys can whitelist any IP or CIDR range\n* **Path-Based Exclusion**: Exclude specific URL paths from authentication\n* **IPv6 Support**: Full support for IPv6 and IPv4 addresses\n* **Firewall Integration**: Optional firewalld integration for advanced security\n\n## Usage\n\n1. Use the `/knock` endpoint to add IPs to the whitelist\n2. Reverse proxies can use `/verify` to check if an IP is authorized\n3. Monitor service health with the `/health` endpoint\n",
    "version": "1.0.0"
  },
  "paths": {
    "/knock": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Whitelist IP Address",
        "description": "Add an IP address or CIDR range to the whitelist.\n    \n    * Requires a valid API key in the `X-Api-Key` header\n    * By default whitelists the client's IP address\n    * Can whitelist a different IP/CIDR if the API key has remote whitelist permission\n    * TTL can be specified but will be capped by the API key's maximum TTL",
        "operationId": "knock_knock_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/KnockRequest"
                  },
                  {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully whitelisted the IP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnockResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - failed to persist whitelist or create firewall rules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Authentication"
        ],
        "summary": "CORS Preflight",
        "description": "Handles OPTIONS requests for CORS preflight checks.",
        "operationId": "knock_options_knock_options",
        "responses": {
          "204": {
            "description": "Successful Response"
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Health Check",
        "description": "Verify that the Knocker service is running and operational.",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/verify": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Verify IP Authorization",
        "description": "Verify if a client IP is currently whitelisted and authorized.\n    \n    This endpoint is typically used by reverse proxies (like Caddy's forward_auth)\n    to check if a request should be allowed through.\n    \n    * Returns 200 if the IP is whitelisted or in always-allowed list\n    * Returns 200 if the request path is in the excluded paths list  \n    * Returns 401 if the IP is not authorized\n    * Uses X-Forwarded-For header when coming from trusted proxies\n    * Uses X-Forwarded-Uri header to check excluded paths",
        "operationId": "verify_verify_get",
        "responses": {
          "200": {
            "description": "IP is authorized - access granted",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "IP is not authorized - access denied"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "properties": {
          "error": {
            "type": "string",
            "title": "Error",
            "description": "Error message describing what went wrong",
            "example": "Invalid or missing API key."
          }
        },
        "type": "object",
        "required": [
          "error"
        ],
        "title": "ErrorResponse",
        "description": "Response schema for error responses."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Service status indicator",
            "example": "ok"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "HealthResponse",
        "description": "Response schema for health check endpoint."
      },
      "KnockRequest": {
        "properties": {
          "ip_address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ip Address",
            "description": "IP address or CIDR range to whitelist. If not provided, the client's IP is used.",
            "example": "192.168.1.100"
          },
          "ttl": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Ttl",
            "description": "Time-to-live in seconds for the whitelist entry. Must be positive integer.",
            "example": 3600
          }
        },
        "type": "object",
        "title": "KnockRequest",
        "description": "Request schema for the knock endpoint."
      },
      "KnockResponse": {
        "properties": {
          "whitelisted_entry": {
            "type": "string",
            "title": "Whitelisted Entry",
            "description": "The IP address or CIDR range that was added to the whitelist",
            "example": "192.168.1.100"
          },
          "expires_at": {
            "type": "integer",
            "title": "Expires At",
            "description": "Unix timestamp when the whitelist entry will expire",
            "example": 1640995200
          },
          "expires_in_seconds": {
            "type": "integer",
            "title": "Expires In Seconds",
            "description": "Number of seconds until the entry expires (actual TTL applied)",
            "example": 3600
          }
        },
        "type": "object",
        "required": [
          "whitelisted_entry",
          "expires_at",
          "expires_in_seconds"
        ],
        "title": "KnockResponse",
        "description": "Response schema for successful knock requests."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "Endpoints for IP whitelisting and verification"
    },
    {
      "name": "System",
      "description": "Health monitoring and system status"
    }
  ]
}